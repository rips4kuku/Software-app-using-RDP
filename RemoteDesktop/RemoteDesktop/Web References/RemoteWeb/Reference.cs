//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace RemoteDesktop.RemoteWeb {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="clsRemoteWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class clsRemoteWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPendingJobListOperationCompleted;
        
        private System.Threading.SendOrPostCallback startJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoneJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSelectCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeSelectCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public clsRemoteWebService() {
            this.Url = global::RemoteDesktop.Properties.Settings.Default.RemoteDesktop_RemoteWeb_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;
        
        /// <remarks/>
        public event SendRequestCompletedEventHandler SendRequestCompleted;
        
        /// <remarks/>
        public event AuthenticateEmployeeCompletedEventHandler AuthenticateEmployeeCompleted;
        
        /// <remarks/>
        public event getPendingJobListCompletedEventHandler getPendingJobListCompleted;
        
        /// <remarks/>
        public event startJobCompletedEventHandler startJobCompleted;
        
        /// <remarks/>
        public event DoneJobCompletedEventHandler DoneJobCompleted;
        
        /// <remarks/>
        public event CustomerInsertCompletedEventHandler CustomerInsertCompleted;
        
        /// <remarks/>
        public event CustomerUpdateCompletedEventHandler CustomerUpdateCompleted;
        
        /// <remarks/>
        public event CustomerDeleteCompletedEventHandler CustomerDeleteCompleted;
        
        /// <remarks/>
        public event CustomerSelectCustomCompletedEventHandler CustomerSelectCustomCompleted;
        
        /// <remarks/>
        public event EmployeeInsertCompletedEventHandler EmployeeInsertCompleted;
        
        /// <remarks/>
        public event EmployeeUpdateCompletedEventHandler EmployeeUpdateCompleted;
        
        /// <remarks/>
        public event EmployeeDeleteCompletedEventHandler EmployeeDeleteCompleted;
        
        /// <remarks/>
        public event EmployeeSelectCustomCompletedEventHandler EmployeeSelectCustomCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AuthenticateUser(string UserName, string Password) {
            object[] results = this.Invoke("AuthenticateUser", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string UserName, string Password) {
            this.AuthenticateUserAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string UserName, string Password, object userState) {
            if ((this.AuthenticateUserOperationCompleted == null)) {
                this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateUser", new object[] {
                        UserName,
                        Password}, this.AuthenticateUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateUserOperationCompleted(object arg) {
            if ((this.AuthenticateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendRequest(decimal customerID, string IPAddress, string winLoginName, string winPassword, string remarks) {
            object[] results = this.Invoke("SendRequest", new object[] {
                        customerID,
                        IPAddress,
                        winLoginName,
                        winPassword,
                        remarks});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendRequestAsync(decimal customerID, string IPAddress, string winLoginName, string winPassword, string remarks) {
            this.SendRequestAsync(customerID, IPAddress, winLoginName, winPassword, remarks, null);
        }
        
        /// <remarks/>
        public void SendRequestAsync(decimal customerID, string IPAddress, string winLoginName, string winPassword, string remarks, object userState) {
            if ((this.SendRequestOperationCompleted == null)) {
                this.SendRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendRequestOperationCompleted);
            }
            this.InvokeAsync("SendRequest", new object[] {
                        customerID,
                        IPAddress,
                        winLoginName,
                        winPassword,
                        remarks}, this.SendRequestOperationCompleted, userState);
        }
        
        private void OnSendRequestOperationCompleted(object arg) {
            if ((this.SendRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendRequestCompleted(this, new SendRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AuthenticateEmployee(string UserName, string Password) {
            object[] results = this.Invoke("AuthenticateEmployee", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateEmployeeAsync(string UserName, string Password) {
            this.AuthenticateEmployeeAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void AuthenticateEmployeeAsync(string UserName, string Password, object userState) {
            if ((this.AuthenticateEmployeeOperationCompleted == null)) {
                this.AuthenticateEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateEmployeeOperationCompleted);
            }
            this.InvokeAsync("AuthenticateEmployee", new object[] {
                        UserName,
                        Password}, this.AuthenticateEmployeeOperationCompleted, userState);
        }
        
        private void OnAuthenticateEmployeeOperationCompleted(object arg) {
            if ((this.AuthenticateEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateEmployeeCompleted(this, new AuthenticateEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPendingJobList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getPendingJobList() {
            object[] results = this.Invoke("getPendingJobList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getPendingJobListAsync() {
            this.getPendingJobListAsync(null);
        }
        
        /// <remarks/>
        public void getPendingJobListAsync(object userState) {
            if ((this.getPendingJobListOperationCompleted == null)) {
                this.getPendingJobListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPendingJobListOperationCompleted);
            }
            this.InvokeAsync("getPendingJobList", new object[0], this.getPendingJobListOperationCompleted, userState);
        }
        
        private void OngetPendingJobListOperationCompleted(object arg) {
            if ((this.getPendingJobListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPendingJobListCompleted(this, new getPendingJobListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/startJob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void startJob(long _RequestID, short _EmployeeID) {
            this.Invoke("startJob", new object[] {
                        _RequestID,
                        _EmployeeID});
        }
        
        /// <remarks/>
        public void startJobAsync(long _RequestID, short _EmployeeID) {
            this.startJobAsync(_RequestID, _EmployeeID, null);
        }
        
        /// <remarks/>
        public void startJobAsync(long _RequestID, short _EmployeeID, object userState) {
            if ((this.startJobOperationCompleted == null)) {
                this.startJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartJobOperationCompleted);
            }
            this.InvokeAsync("startJob", new object[] {
                        _RequestID,
                        _EmployeeID}, this.startJobOperationCompleted, userState);
        }
        
        private void OnstartJobOperationCompleted(object arg) {
            if ((this.startJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoneJob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoneJob(long _RequestID) {
            this.Invoke("DoneJob", new object[] {
                        _RequestID});
        }
        
        /// <remarks/>
        public void DoneJobAsync(long _RequestID) {
            this.DoneJobAsync(_RequestID, null);
        }
        
        /// <remarks/>
        public void DoneJobAsync(long _RequestID, object userState) {
            if ((this.DoneJobOperationCompleted == null)) {
                this.DoneJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoneJobOperationCompleted);
            }
            this.InvokeAsync("DoneJob", new object[] {
                        _RequestID}, this.DoneJobOperationCompleted, userState);
        }
        
        private void OnDoneJobOperationCompleted(object arg) {
            if ((this.DoneJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoneJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerInsert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CustomerInsert(string customerName, string companyName, string address, string city, string state, string contactNo, string mobile, string userID, string password, System.DateTime expiryDate) {
            object[] results = this.Invoke("CustomerInsert", new object[] {
                        customerName,
                        companyName,
                        address,
                        city,
                        state,
                        contactNo,
                        mobile,
                        userID,
                        password,
                        expiryDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerInsertAsync(string customerName, string companyName, string address, string city, string state, string contactNo, string mobile, string userID, string password, System.DateTime expiryDate) {
            this.CustomerInsertAsync(customerName, companyName, address, city, state, contactNo, mobile, userID, password, expiryDate, null);
        }
        
        /// <remarks/>
        public void CustomerInsertAsync(string customerName, string companyName, string address, string city, string state, string contactNo, string mobile, string userID, string password, System.DateTime expiryDate, object userState) {
            if ((this.CustomerInsertOperationCompleted == null)) {
                this.CustomerInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerInsertOperationCompleted);
            }
            this.InvokeAsync("CustomerInsert", new object[] {
                        customerName,
                        companyName,
                        address,
                        city,
                        state,
                        contactNo,
                        mobile,
                        userID,
                        password,
                        expiryDate}, this.CustomerInsertOperationCompleted, userState);
        }
        
        private void OnCustomerInsertOperationCompleted(object arg) {
            if ((this.CustomerInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerInsertCompleted(this, new CustomerInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CustomerUpdate(decimal customerID, string customerName, string companyName, string address, string city, string state, string contactNo, string mobile, string userID, string password, System.DateTime expiryDate) {
            this.Invoke("CustomerUpdate", new object[] {
                        customerID,
                        customerName,
                        companyName,
                        address,
                        city,
                        state,
                        contactNo,
                        mobile,
                        userID,
                        password,
                        expiryDate});
        }
        
        /// <remarks/>
        public void CustomerUpdateAsync(decimal customerID, string customerName, string companyName, string address, string city, string state, string contactNo, string mobile, string userID, string password, System.DateTime expiryDate) {
            this.CustomerUpdateAsync(customerID, customerName, companyName, address, city, state, contactNo, mobile, userID, password, expiryDate, null);
        }
        
        /// <remarks/>
        public void CustomerUpdateAsync(decimal customerID, string customerName, string companyName, string address, string city, string state, string contactNo, string mobile, string userID, string password, System.DateTime expiryDate, object userState) {
            if ((this.CustomerUpdateOperationCompleted == null)) {
                this.CustomerUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerUpdateOperationCompleted);
            }
            this.InvokeAsync("CustomerUpdate", new object[] {
                        customerID,
                        customerName,
                        companyName,
                        address,
                        city,
                        state,
                        contactNo,
                        mobile,
                        userID,
                        password,
                        expiryDate}, this.CustomerUpdateOperationCompleted, userState);
        }
        
        private void OnCustomerUpdateOperationCompleted(object arg) {
            if ((this.CustomerUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CustomerDelete(decimal customerID) {
            this.Invoke("CustomerDelete", new object[] {
                        customerID});
        }
        
        /// <remarks/>
        public void CustomerDeleteAsync(decimal customerID) {
            this.CustomerDeleteAsync(customerID, null);
        }
        
        /// <remarks/>
        public void CustomerDeleteAsync(decimal customerID, object userState) {
            if ((this.CustomerDeleteOperationCompleted == null)) {
                this.CustomerDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerDeleteOperationCompleted);
            }
            this.InvokeAsync("CustomerDelete", new object[] {
                        customerID}, this.CustomerDeleteOperationCompleted, userState);
        }
        
        private void OnCustomerDeleteOperationCompleted(object arg) {
            if ((this.CustomerDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerSelectCustom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CustomerSelectCustom(string Where) {
            object[] results = this.Invoke("CustomerSelectCustom", new object[] {
                        Where});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSelectCustomAsync(string Where) {
            this.CustomerSelectCustomAsync(Where, null);
        }
        
        /// <remarks/>
        public void CustomerSelectCustomAsync(string Where, object userState) {
            if ((this.CustomerSelectCustomOperationCompleted == null)) {
                this.CustomerSelectCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSelectCustomOperationCompleted);
            }
            this.InvokeAsync("CustomerSelectCustom", new object[] {
                        Where}, this.CustomerSelectCustomOperationCompleted, userState);
        }
        
        private void OnCustomerSelectCustomOperationCompleted(object arg) {
            if ((this.CustomerSelectCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSelectCustomCompleted(this, new CustomerSelectCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmployeeInsert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EmployeeInsert(string employeeName, string address, string city, string state, string mobile, string userID, string password, bool isActive, bool isFree) {
            object[] results = this.Invoke("EmployeeInsert", new object[] {
                        employeeName,
                        address,
                        city,
                        state,
                        mobile,
                        userID,
                        password,
                        isActive,
                        isFree});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeInsertAsync(string employeeName, string address, string city, string state, string mobile, string userID, string password, bool isActive, bool isFree) {
            this.EmployeeInsertAsync(employeeName, address, city, state, mobile, userID, password, isActive, isFree, null);
        }
        
        /// <remarks/>
        public void EmployeeInsertAsync(string employeeName, string address, string city, string state, string mobile, string userID, string password, bool isActive, bool isFree, object userState) {
            if ((this.EmployeeInsertOperationCompleted == null)) {
                this.EmployeeInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeInsertOperationCompleted);
            }
            this.InvokeAsync("EmployeeInsert", new object[] {
                        employeeName,
                        address,
                        city,
                        state,
                        mobile,
                        userID,
                        password,
                        isActive,
                        isFree}, this.EmployeeInsertOperationCompleted, userState);
        }
        
        private void OnEmployeeInsertOperationCompleted(object arg) {
            if ((this.EmployeeInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeInsertCompleted(this, new EmployeeInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmployeeUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EmployeeUpdate(int employeeID, string employeeName, string address, string city, string state, string mobile, string userID, string password, bool isActive, bool isFree) {
            object[] results = this.Invoke("EmployeeUpdate", new object[] {
                        employeeID,
                        employeeName,
                        address,
                        city,
                        state,
                        mobile,
                        userID,
                        password,
                        isActive,
                        isFree});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeUpdateAsync(int employeeID, string employeeName, string address, string city, string state, string mobile, string userID, string password, bool isActive, bool isFree) {
            this.EmployeeUpdateAsync(employeeID, employeeName, address, city, state, mobile, userID, password, isActive, isFree, null);
        }
        
        /// <remarks/>
        public void EmployeeUpdateAsync(int employeeID, string employeeName, string address, string city, string state, string mobile, string userID, string password, bool isActive, bool isFree, object userState) {
            if ((this.EmployeeUpdateOperationCompleted == null)) {
                this.EmployeeUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeUpdateOperationCompleted);
            }
            this.InvokeAsync("EmployeeUpdate", new object[] {
                        employeeID,
                        employeeName,
                        address,
                        city,
                        state,
                        mobile,
                        userID,
                        password,
                        isActive,
                        isFree}, this.EmployeeUpdateOperationCompleted, userState);
        }
        
        private void OnEmployeeUpdateOperationCompleted(object arg) {
            if ((this.EmployeeUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeUpdateCompleted(this, new EmployeeUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmployeeDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EmployeeDelete(int employeeID) {
            this.Invoke("EmployeeDelete", new object[] {
                        employeeID});
        }
        
        /// <remarks/>
        public void EmployeeDeleteAsync(int employeeID) {
            this.EmployeeDeleteAsync(employeeID, null);
        }
        
        /// <remarks/>
        public void EmployeeDeleteAsync(int employeeID, object userState) {
            if ((this.EmployeeDeleteOperationCompleted == null)) {
                this.EmployeeDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeDeleteOperationCompleted);
            }
            this.InvokeAsync("EmployeeDelete", new object[] {
                        employeeID}, this.EmployeeDeleteOperationCompleted, userState);
        }
        
        private void OnEmployeeDeleteOperationCompleted(object arg) {
            if ((this.EmployeeDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmployeeSelectCustom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet EmployeeSelectCustom(string @where) {
            object[] results = this.Invoke("EmployeeSelectCustom", new object[] {
                        @where});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeSelectCustomAsync(string @where) {
            this.EmployeeSelectCustomAsync(@where, null);
        }
        
        /// <remarks/>
        public void EmployeeSelectCustomAsync(string @where, object userState) {
            if ((this.EmployeeSelectCustomOperationCompleted == null)) {
                this.EmployeeSelectCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeSelectCustomOperationCompleted);
            }
            this.InvokeAsync("EmployeeSelectCustom", new object[] {
                        @where}, this.EmployeeSelectCustomOperationCompleted, userState);
        }
        
        private void OnEmployeeSelectCustomOperationCompleted(object arg) {
            if ((this.EmployeeSelectCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeSelectCustomCompleted(this, new EmployeeSelectCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetPassword(string type, string oldPass, string newPass, decimal ID) {
            object[] results = this.Invoke("ResetPassword", new object[] {
                        type,
                        oldPass,
                        newPass,
                        ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string type, string oldPass, string newPass, decimal ID) {
            this.ResetPasswordAsync(type, oldPass, newPass, ID, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string type, string oldPass, string newPass, decimal ID, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        type,
                        oldPass,
                        newPass,
                        ID}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SendRequestCompletedEventHandler(object sender, SendRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AuthenticateEmployeeCompletedEventHandler(object sender, AuthenticateEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void getPendingJobListCompletedEventHandler(object sender, getPendingJobListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPendingJobListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPendingJobListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void startJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DoneJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CustomerInsertCompletedEventHandler(object sender, CustomerInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CustomerUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CustomerDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CustomerSelectCustomCompletedEventHandler(object sender, CustomerSelectCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSelectCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSelectCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EmployeeInsertCompletedEventHandler(object sender, EmployeeInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EmployeeUpdateCompletedEventHandler(object sender, EmployeeUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EmployeeDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EmployeeSelectCustomCompletedEventHandler(object sender, EmployeeSelectCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeSelectCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeSelectCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591